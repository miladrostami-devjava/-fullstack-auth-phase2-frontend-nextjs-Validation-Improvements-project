"use client";

import {useEffect, useState} from "react";
import {useRouter} from "next/navigation";
import Container from "@/components/Container";
import axios from "axios";
import LogoutButton from "@/components/LogoutButton";

type UserType = {
    username: string;
    email: string;
    role: string;
    profilePhoto?: string;
};

export default function ProfilePage() {
    const [user, setUser] = useState<UserType>({
        username: "",
        email: "",
        role: "",
    });

    const [oldPassword, setOldPassword] = useState("");
    const [newPassword, setNewPassword] = useState("");
    const [file, setFile] = useState<File | null>(null);
    const [loading, setLoading] = useState(true);
    const router = useRouter();

    const token = typeof window !== "undefined" ? localStorage.getItem("jwt") : null;

    useEffect(() => {
        if (!token) {
            router.push("/login");
            return;
        }

        axios
            .get("http://localhost:9090/api/user/profile", {
                headers: {Authorization: `Bearer ${token}`},
            })
            .then((res) => {
                const data = res.data;
                setUser({
                    username: data.username || "",
                    email: data.email || "",
                    role: data.role || "",
                    profilePhoto: data.profilePhoto || "",
                });
                setLoading(false);
            })
            .catch(() => {
                localStorage.removeItem("jwt");
                router.push("/login");
            });
    }, []);

    const handleUpdate = async () => {
        try {
            console.log("Sending token:", token);

            await axios.put("http://localhost:9090/api/profile", user, {
                headers: {Authorization: `Bearer ${token}`},
            });
            alert("Updated!");
        } catch (error) {
            console.error("Update failed:", error);
            alert("Update failed!");
        }
    };

    const handlePasswordChange = async () => {
        try {
            await axios.put(
                "http://localhost:9090/api/profile/password",
                {oldPassword, newPassword},
                {headers: {Authorization: `Bearer ${token}`}}
            );
            alert("Password changed!");
        } catch (error) {
            console.error("Password change failed:", error);
            alert("Password change failed!");
        }
    };

    const handleDeleteAccount = async () => {
        try {
            await axios.delete("http://localhost:9090/api/profile", {
                headers: {Authorization: `Bearer ${token}`},
            });
            localStorage.removeItem("jwt");
            router.push("/register");
        } catch (error) {
            console.error("Delete failed:", error);
            alert("Delete failed!");
        }
    };

    const handleUpload = async () => {
        if (!file) return;
        const formData = new FormData();
        formData.append("file", file);

        try {
            await axios.post("http://localhost:9090/api/profile/photo", formData, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "multipart/form-data",
                },
            });
            alert("Photo uploaded");

// üîÅ Refresh profile data
            const res = await axios.get("http://localhost:9090/api/user/profile", {
                headers: { Authorization: `Bearer ${token}` },
            });
            const data = res.data;
            setUser({
                username: data.username || "",
                email: data.email || "",
                role: data.role || "",
                profilePhoto: data.profilePhoto || "",
            });
        } catch (error) {
            console.error("Upload failed:", error);
            alert("Upload failed!");
        }
    };

    if (loading) {
        return (
            <Container>
                <div className="text-center p-10 text-gray-500">Loading profile...</div>
            </Container>
        );
    }

    return (
        <Container>
            <div className="max-w-xl mx-auto bg-white p-6 mt-10 rounded shadow space-y-4">
                <h1 className="text-2xl font-bold">Profile</h1>
             <div>
                 {user.profilePhoto && (
                     <div className="mt-6">
                         <h2 className="font-semibold">Your Photo</h2>
                         <img
                             src={`http://localhost:9090/api/profile/photo/${user.profilePhoto}`}
                             alt="Profile"
                             className="w-32 h-32 object-cover rounded-full border mt-2"
                         />
                     </div>
                 )}
             </div>

                <div>
                    <label>Username:</label>
                    <input
                        className="border p-2 w-full"
                        value={user.username}
                        onChange={(e) => setUser({...user, username: e.target.value})}
                    />
                </div>

                <div>
                    <label>Email:</label>
                    <input
                        className="border p-2 w-full"
                        value={user.email}
                        onChange={(e) => setUser({...user, email: e.target.value})}
                    />
                </div>

                <div>
                    <label>Role:</label>
                    <input className="border p-2 w-full" value={user.role} disabled/>
                </div>

                <button
                    onClick={handleUpdate}
                    className="bg-blue-500 text-white px-4 py-2 rounded"
                >
                    Update
                </button>

                <div className="mt-6">
                    <h2 className="font-semibold">Change Password</h2>
                    <input
                        type="password"
                        placeholder="Old Password"
                        className="border p-2 w-full mt-2"
                        value={oldPassword}
                        onChange={(e) => setOldPassword(e.target.value)}
                    />
                    <input
                        type="password"
                        placeholder="New Password"
                        className="border p-2 w-full mt-2"
                        value={newPassword}
                        onChange={(e) => setNewPassword(e.target.value)}
                    />
                    <button
                        onClick={handlePasswordChange}
                        className="bg-yellow-500 text-white px-4 py-2 mt-2 rounded"
                    >
                        Change Password
                    </button>
                </div>

                <div className="mt-6">
                    <h2 className="font-semibold">Upload Photo</h2>
                    <input
                        type="file"
                        onChange={(e) => setFile(e.target.files?.[0] || null)}
                    />
                    <button
                        onClick={handleUpload}
                        className="bg-purple-500 text-white px-4 py-2 mt-2 rounded"
                    >
                        Upload
                    </button>
                </div>

                <div className="mt-6">
                    <button
                        onClick={handleDeleteAccount}
                        className="bg-red-500 text-white px-4 py-2 rounded"
                    >
                        Delete Account
                    </button>
                </div>
                <div className="mt-6">
                    <LogoutButton/>
                </div>
            </div>
        </Container>
    );
}
